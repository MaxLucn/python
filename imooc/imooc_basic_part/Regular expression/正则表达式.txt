正则表达式：regex 是一些由字符和特殊符号组成的字符串
        能按照某种模式匹配一系列有相似特征的字符串


常用：
* ：匹配0次或者多次
+： 匹配1次或者多次
？： 匹配0 次或者1 次
{N}：匹配指定的次数
{M，N}；匹配  M —— N 次，最大化优先


匹配同类型：
\d: 匹配数字
\w: 匹配数字和字母
\s: 匹配空格字符串（\n, \s等）


正则表达式的分组：重复一个字符串时

贪婪匹配、、非贪婪匹配
贪婪匹配：在整个表达式匹配成功的前提下，尽可能多的匹配（默认情况下）
非贪婪匹配：在整个表达式匹配成功的前提下，以最少的字符匹配，在匹配中加上"?"


re 模块--compile
            compile(pattern, flags=0)
            使用任何可选的标记来编译正则表达式的模式，然后返回一个正则表达式对象
      --match
            match(pattern, string, flags=0)
            尝试使用带有可选的标记的正则表达式的模式来匹配字符串。如果匹配成功，就返回匹配对象，如果失败返回None

findall() 的使用
    findall(pattern, string[, flags])
       查找字符串中所有（非重复）出现的正则表达式模式，并返回一个匹配列表

search() 的使用
    search(pattern, string, flags=0)
        使用可选标记搜索字符串中第一次出现的正则表达式模式。如果成功则返回匹配对象，如果失败返回None

        match() \ search() 的区别：match 在字符串中第一个未知开始找需要的字符串，如果第一个位置的比匹配就直接返回None，
                          search 则会遍历整个字符串找到为止，如果没有返回 None

group() \ groups() \ groupdict()  （分组）的使用
        group(num)返回整个匹配对象或编号为 num 的特定子组
        groups(): 返回一个包含所有匹配子组的元组（如果没有成功匹配，则返回一个空元组）

split() 正则分割
        split(pattern, string, max=0)
        根据正则表达式的模式分隔符，split 函数将字符串分割为列表，然后返回成功匹配的列表，分割最多操作 max 次（默认分割所有匹配
        成功的位置）

sub() 正则表达式的替换
        sub(pattern, repl,string,  max=0)
        使用 repl 替换 string 中每一个匹配的子串后返回替换后的字符串，最多操作 max 次（默认替换所有）

