MTV 模型：在一个项目中，这三部分内容不需要同时存在
模型 Model:与数据库相关
    与模型相关的扩展：
        Flask-PyMongo/Flask-MongoKit
        Flask-SQLAlchemy
视图  View:负责业务逻辑对应项目中的视图函数
    与视图相关的扩展
        Flask-WTF/bootstrap-flask/Flask-Uploads
模版  Template：负责如何把页面展示给用户（HTML）
    jinja2


启动服务器
第一步、设置环境变量
    Windows: set FLASK_APP=app.py
    linux & mac :export FLASK_APP=app.py

第二步、 flask run  启动内置 web 服务器
    也可以指定 IP 及端口
    flask run --host=0.0.0.0  --port=8001
    或者 flask run -h 0.0.0.0 -p 8001


开启调试模式
    代码修改后服务器自动重启
    第一步：设置环境变量
        Windows: set FLASK_ENV=development
        Linux & Mac: export FLASK_ENV=development
    第二步： flask run 启动内置 web 服务器


flask 的扩展
    pypi.org


URL 及 HTTP
1、什么是 URL
    统一资源定位符
    每一个文件都有唯一的URL（地址）
    基本的URL由协议、服务器名称(ip地址)、路径和文件名组成
2、常见的网络协议有哪些
    http：超文本传输协议
    https：用安全套接字层传输的超文本传输协议
    ftp：文件传输协议
3、常见的HTTP 请求方式有哪些
4、GET 请求与 POST 请求有什么区别
    GET 可以用浏览器直接访问
        请求可以携带参数，但是有长度限制
        请求参数可以放在 URL 后面
    POST 不能用浏览器直接访问
         对请求参数没有长度限制
         可以用来上传文件等需求
5、不同的 HTTP相应状态码有什么含义


路由的配置
    一、使用装饰器
        @app.route(url, methods)
            url:匹配的 url 地址
            methods：所支持的请求方式
    二、使用 API 配置
        app.add_url_rule(url, url_name, view_name)
            url：匹配的 url 地址
            url_name：给 URL 的命名
            view_name：视图函数

路由的匹配规则
    匹配整个文字
        @app.route('/hello')
    传递参数
        @app.route('/user/<username>')
    指定参数类型
        @app.route('/post/<int:post_id>')


查看 url 规则列表
    app.url_map

url 逆向解析
    1、url_for(url_name, **kwargs)
    2、静态文件（js/css/图片）引用
        url_for('static', filename='style.css')

视图函数中获取页面传值
    url 中的值
        @app.route('/page/<page>')
        def list_user(page):
    url 中的值为可选
        @app.route('/page/<page>')
        def list_user(page=None):


应用上下文对象
    current_app
        当前应用的实例
    g
        处理请求时的临时存储对象，每次请求都会重设这个变量

请求上下文对象
    request
        请求对象，封装了客户端发出的 HTTP 请求中的内容
    session
        用户会话（dict），各请求之间的数据共享

请求报文常用参数
    method：请求的类型
    form：post 请求数据 dict
    args： get 请求数据 dict
    values： post 请求和 get 请求数据集合 dict

请求钩子
    before_first_request
        服务器初始化后第一个请求到达之前执行
    before_request
        每一个请求到达之前执行
    after_request
        每次请求处理完成后执行，如果请求过程中产生了异常就不执行
    teardown_request
        每次请求处理完成之后执行，如果请求过程中产生了异常会继续执行


重定向等内部视图
    redirect()  实现重定向
    abort()  处理错误



Flask 模版语法与继承
    flask 模版默认配置
        template_folder = 'templates' --- 模版的默认目录
        render_template()----(x)html自动转义
        render_template_string()----字符串自动转义
        {%autoescape%}----手动设置是否转义
        全局函数和辅助对象----增强模版的功能


    全局对象
        config --- Flask 的配置信息
        request --- 请求对象
        session --- 会话对象
        g --- 请求相关的全局变量（如：g.user）


    全局函数
        url_for()  URL解析函数（如：静态文件地址解析，链接跳转地址解析）
        get_flashed_messages()  会话消息


模版标签
    条件表达式
        {% if condition_a %}
            满足了 a 条件
        {% elif condition_b %}
            满足了 b 条件
        {% else %}
            都不满足
        {% endif %}     结束标签


    去除 HTML 中多余的空白（在网页查看源代码时）
        在块的开始或者结束加一  '-'，不能用空格。比如：
            {%- if condition_a %} 或者 {% if condition_a -%}


    设置变量，赋值操作
        先设置，后使用，可以通过 import 导入
            {% set key, value = (1, 2) %}

    使用 with 代码块，实现块级作用域
        {% with %}
            {% set value = 42 %}
            {{ value }}  只在代码块中有效
        {% endwith %}



过滤器：
    修改变量
    用 ｜ 分割
    可以链式调用: {{ name | striptags | title }}
    可以用圆括号传递可选参数:  {{ list | join(',') }}


    富文本内容转义显示
        {{ value|safe }}

    倒序显示
        {{ value|reverse }}


    自定义过滤器
        1、使用装饰器注册
        @app.template_filter('reverse')
        def reverse_filter(s):
            return s[::-1]

        2、调用函数注册
        def reverse_filter(s):
            return s[::-1]

        app.jinja_env.filter['reverse'] = reverse_filter


模版中全局函数的使用
    range 函数的使用基本类似 pyhton 中 range 函数的使用
        range([start], stop[,step])

    dict(**items)

    可用于 css 类名的循环
        cycler(*items)

    用于字符串的拼接
        joiner(sep=',')


模版的继承
    实现继承
        1、把可变的部分圈出来（base.html）
            {% block content -%}
                <!-- 内容区域 -->
            {%- endblock %}
        2、继承父模版
            {% extends 'base.html' -%}



