MTV 模型：在一个项目中，这三部分内容不需要同时存在
模型 Model:与数据库相关
    与模型相关的扩展：
        Flask-PyMongo/Flask-MongoKit
        Flask-SQLAlchemy
视图  View:负责业务逻辑对应项目中的视图函数
    与视图相关的扩展
        Flask-WTF/bootstrap-flask/Flask-Uploads
模版  Template：负责如何把页面展示给用户（HTML）
    jinja2


启动服务器
第一步、设置环境变量
    Windows: set FLASK_APP=app.py
    linux & mac :export FLASK_APP=app.py

第二步、 flask run  启动内置 web 服务器
    也可以指定 IP 及端口
    flask run --host=0.0.0.0  --port=8001
    或者 flask run -h 0.0.0.0 -p 8001


开启调试模式
    代码修改后服务器自动重启
    第一步：设置环境变量
        Windows: set FLASK_ENV=development
        Linux & Mac: export FLASK_ENV=development
    第二步： flask run 启动内置 web 服务器


flask 的扩展
    pypi.org


URL 及 HTTP
1、什么是 URL
    统一资源定位符
    每一个文件都有唯一的URL（地址）
    基本的URL由协议、服务器名称(ip地址)、路径和文件名组成
2、常见的网络协议有哪些
    http：超文本传输协议
    https：用安全套接字层传输的超文本传输协议
    ftp：文件传输协议
3、常见的HTTP 请求方式有哪些
4、GET 请求与 POST 请求有什么区别
    GET 可以用浏览器直接访问
        请求可以携带参数，但是有长度限制
        请求参数可以放在 URL 后面
    POST 不能用浏览器直接访问
         对请求参数没有长度限制
         可以用来上传文件等需求
5、不同的 HTTP相应状态码有什么含义


路由的配置
    一、使用装饰器
        @app.route(url, methods)
            url:匹配的 url 地址
            methods：所支持的请求方式
    二、使用 API 配置
        app.add_url_rule(url, url_name, view_name)
            url：匹配的 url 地址
            url_name：给 URL 的命名
            view_name：视图函数

路由的匹配规则
    匹配整个文字
        @app.route('/hello')
    传递参数
        @app.route('/user/<username>')
    指定参数类型
        @app.route('/post/<int:post_id>')


查看 url 规则列表
    app.url_map

url 逆向解析
    1、url_for(url_name, **kwargs)
    2、静态文件（js/css/图片）引用
        url_for('static', filename='style.css')

视图函数中获取页面传值
    url 中的值
        @app.route('/page/<page>')
        def list_user(page):
    url 中的值为可选
        @app.route('/page/<page>')
        def list_user(page=None):


应用上下文对象
    current_app
        当前应用的实例
    g
        处理请求时的临时存储对象，每次请求都会重设这个变量

请求上下文对象
    request
        请求对象，封装了客户端发出的 HTTP 请求中的内容
    session
        用户会话（dict），各请求之间的数据共享

请求报文常用参数
    method：请求的类型
    form：post 请求数据 dict
    args： get 请求数据 dict
    values： post 请求和 get 请求数据集合 dict